#version 330 core
in vec4 GColor;
in vec2 TexCoord;
in vec3 GNormal;
in float GTime;
out vec4 color;
uniform sampler2D _texture;
in vec3 pos;
/*
void main()
{

vec3 light_dir = vec3(1,1,0);
vec3 ambient = vec3(0,0,0.2);
float angle = dot(new_normal, light_dir);
vec3 new_color = max(ourColor.xyz * (angle+10),ambient* ourColor.xyz);
color =vec4( new_color,1);
}*/

vec2 blinnPhongDir(vec3 lightDir, float lightInt, float Ka, float Kd, float Ks, float shininess)
{
vec3 s = normalize(lightDir);
vec3 v = normalize(-pos);
vec3 n = normalize(GNormal);
vec3 h = normalize(v+s);
float diffuse = Ka + Kd * lightInt * max(0.0, dot(n, s));
float spec = Ks * pow(max(0.0, dot(n,h)), shininess);
return vec2(diffuse, spec);
}

void main()
{

 // light data
 vec3 lightdir = vec3(0.0, 0.0, 1.0);
 vec3 ambient = vec3(0, 0, 0.2);
 vec3 diffuse = GColor.xyz;
 vec3 specular = vec3(1, 1, 1);
 float shiny = 500.0;

 vec3 specularity = vec3(1);

  // calculate intensity
// float intensity = dot(new_normal, lightdir);
/*
 // calculate specularity
 if(intensity > 0.0)
 {
 vec3 eye = normalize(pos);
 vec3 h = normalize(lightdir + eye);

 float intensity_specular = dot(h, new_normal);
 specularity = specular * pow(intensity_specular, shiny);
 }

 // Output the final color
 vec3 new_color = intensity * diffuse + specularity;
color = vec4(new_color,1);*/
vec3 lcolor =GColor.xyz;
vec2 inten = blinnPhongDir(lightdir, 1, 0.2, 0.8, 0.8, 1.0);
color = vec4(lcolor * inten.x + vec3(1.0) * inten.y, 1.0);
//color = GColor;
}


